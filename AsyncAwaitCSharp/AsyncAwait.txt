1. 비동기 프로그래밍 (Asynchronous Programming)
C#은 async와 await 키워드를 제공하여 손쉽게 비동기 프로그래밍을 구현할 수 있다.
긴 작업을 메인 스레드에서 분리하여 실행 후 결과를 반환하는 방식이다

Task A, B, C, D가 존재할 경우 기존의 동기식 프로그램에서는 순차적으로만 작업을 수행하고 D가 완료될 때까지 다른 작업을 할 수 없었다.
- 이익 1. 사용자 인터페이스
Task B가 많은 시간이 소요되는 작업일 경우 사용자 인터페이스가 잠겨 사용할 수 없을 수 있다.
 

- 이익 2. 병렬처리 (Parallel)
병렬처리로 인하여 각각의 다른 작업을 기다리지 않고 동시에 실행할 수 있다. 

문제점 1. UI 인터페이스 멈추는 현상, 2. 하나의 작업이 끝날 때까지 기다려야하는 현상

동기는 프로그램이 순서대로 실행됨을 의미한다. 프로그램은 기본적으로 동기로 실행된다.
특히, 프로그램 코드에서 메서드는 동기(Synchronous)로 실행된다.
비동기 (Asynchrounous)프로그램은 여러 개의 메서드를 동시에 실행시키거나 대기 시점을 변경하여 순서를 재정의할 수 있다.

동기는 실행하는 동안 스레드가 차단되는 Blocking 코드를 나타내고, 비동기는 스레드가 차단되지 않는 비차단 Non Blocking 코드를 나타낸다.




동기식 프로그래밍
	1) 함수 호출
	func(); // 2) 함수 수행
	3) 함수 수행의 결과를 기다리는 것
	=> 결과 값을 다음 작업에서 필요한 경우\
	=> waiting 상태가 기본

비동기식 프로그래밍
	1) 함수 호출
	func(); // 2) 함수 수행
	3) 함수 수행하고 다른 작업을 수행한다.
	=> 함수의 수행 여부 및 결과와 상관없이 프로그램이 구동되는 경우
	=> 함수 호출 후 다음 작업을 수행한 경우, 수행되고 있는 함수의 값들을 받아오는 콜백 함수가 존재한다.